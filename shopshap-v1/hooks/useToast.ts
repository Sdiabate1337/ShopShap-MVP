import { useToastContext } from '@/components/ToastProvider';

export function useToasts() {
  const { success, error, warning, info } = useToastContext();

  return {
    // ‚úÖ Fonctions de base toujours accessibles
    success,
    error,
    warning,
    info,
    
    // ‚úÖ Namespaces organis√©s par domaine
    auth: {
      loginSuccess: (email: string) => success('Connexion r√©ussie !', `Bienvenue ${email}`),
      loginError: (reason?: string) => error('Connexion √©chou√©e', reason || 'V√©rifiez vos identifiants'),
      logoutSuccess: () => info('D√©connexion', '√Ä bient√¥t sur ShopShap !'),
      registerSuccess: (shopName?: string) => success('Compte cr√©√© !', shopName ? `Bienvenue ${shopName}` : 'Bienvenue sur ShopShap'),
      passwordChanged: () => success('Mot de passe modifi√©', 'Votre compte est maintenant s√©curis√©'),
      sessionExpired: () => warning('Session expir√©e', 'Veuillez vous reconnecter'),
      emailTaken: () => warning('Email d√©j√† utilis√©', 'Cet email est d√©j√† associ√© √† un compte'),
      weakPassword: () => warning('Mot de passe faible', 'Utilisez au moins 8 caract√®res avec des chiffres'),
      
      // M√©thodes pour la v√©rification
      validationError: (field: string) => error('Champ requis', `${field} est obligatoire`),
      invalidCode: () => error('Code incorrect', 'Le code saisi n\'est pas valide. V√©rifiez et r√©essayez'),
      codeExpired: () => warning('Code expir√©', 'Votre code a expir√©. Demandez un nouveau code'),
      codeVerified: () => success('Code valid√© !', 'Votre identit√© a √©t√© confirm√©e avec succ√®s'),
      verificationError: (message: string) => error('Erreur de v√©rification', message),
      welcomeMessage: () => info('Bienvenue !', 'Cr√©ons maintenant votre boutique en ligne'),
    },

    product: {
      created: (name: string) => success('Produit cr√©√© !', `${name} est maintenant disponible dans votre catalogue`),
      updated: (name: string) => success('Produit modifi√© !', `Les modifications de ${name} sont visibles`),
      deleted: (name: string) => warning('Produit supprim√©', `${name} a √©t√© retir√© de votre catalogue`),
      stockLow: (name: string, stock: number) => warning('Stock critique', `Il ne reste que ${stock} unit√©(s) de ${name}`),
      uploadStart: () => info('Upload en cours...', 'T√©l√©chargement de vos images'),
      uploadSuccess: () => success('Images upload√©es !', 'Vos photos ont √©t√© sauvegard√©es'),
      uploadError: (reason?: string) => error('Upload √©chou√©', reason || 'Impossible de t√©l√©charger l\'image'),
      validationError: (field: string) => error('Champ requis', `${field} est obligatoire`),
      invalidFormat: (field: string, format: string) => warning('Format invalide', `${field} doit √™tre au format: ${format}`),
    },

    order: {
      created: (amount: number) => success('Commande cr√©√©e !', `Commande de ${amount.toLocaleString()} FCFA enregistr√©e`),
      updated: (status: string, customer?: string) => success('Statut mis √† jour !', `Commande ${customer ? `de ${customer} ` : ''}marqu√©e comme ${status}`),
      deleted: () => warning('Commande supprim√©e', 'La commande a √©t√© retir√©e de votre historique'),
      paymentReceived: (amount: number) => success('Paiement re√ßu !', `${amount.toLocaleString()} FCFA cr√©dit√©`),
      newOrder: (customerName: string, amount: number | string) => {
        if (typeof amount === 'number') {
          return info('Nouvelle commande !', `${customerName} - ${amount.toLocaleString()} FCFA`);
        } else {
          return info('Nouvelles commandes !', `${amount} commandes en attente`);
        }
      },
      bulkUpdate: (count: number, action: string) => success('Action group√©e', `${count} commande(s) ${action}`),
      proofUploaded: () => success('Preuve ajout√©e !', 'La preuve de paiement a √©t√© enregistr√©e'),
      reminderSent: (customerName: string) => info('Rappel envoy√©', `Notification envoy√©e √† ${customerName}`),
    },

    shop: {
      welcome: (name: string) => success('Bon retour !', `Content de vous revoir ${name}`),
      profileUpdated: () => success('Profil mis √† jour !', 'Vos modifications ont √©t√© sauvegard√©es avec succ√®s'),
      linkShared: () => info('Lien partag√© !', 'Votre catalogue a √©t√© partag√©'),
      statsUpdated: () => info('Donn√©es synchronis√©es', 'Vos statistiques sont √† jour'),
      photoSelected: () => info('Photo s√©lectionn√©e', 'N\'oubliez pas de sauvegarder vos modifications'),
    },

    system: {
      saveSuccess: () => success('Sauvegard√© !', 'Vos modifications ont √©t√© enregistr√©es'),
      networkError: () => error('Connexion', 'V√©rifiez votre connexion internet et r√©essayez'),
      serverError: () => error('Erreur serveur', 'Un probl√®me temporaire est survenu'),
      syncInProgress: () => info('Synchronisation...', 'Mise √† jour de vos donn√©es'),
      syncSuccess: () => success('Donn√©es synchronis√©es !', 'Votre boutique est √† jour'),
      featureComingSoon: (feature: string) => info('Bient√¥t disponible', `${feature} arrive dans une prochaine mise √† jour`),
      tip: (message: string) => info('üí° Conseil', message),
      actionUndoable: (action: string) => warning('Action effectu√©e', `${action} ne peut pas √™tre annul√©(e)`),
      fileTooLarge: () => error('Fichier trop volumineux', 'La photo ne doit pas d√©passer 5MB'),
      invalidFormat: () => error('Format invalide', 'Veuillez s√©lectionner une image (JPG, PNG, etc.)'),
    },
  };
}